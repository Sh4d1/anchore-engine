# coding: utf-8

"""
    anchore_engine.services.policy_engine

    This is a policy evaluation service. It receives push-events from external systems for data updates and provides an api for requesting image policy checks  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: zach@anchore.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TriggerParamSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'example': 'str',
        'required': 'bool',
        'state': 'str',
        'superceded_by': 'str',
        'validator': 'object'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'example': 'example',
        'required': 'required',
        'state': 'state',
        'superceded_by': 'superceded_by',
        'validator': 'validator'
    }

    def __init__(self, name=None, description=None, example=None, required=None, state=None, superceded_by=None, validator=None):  # noqa: E501
        """TriggerParamSpec - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._example = None
        self._required = None
        self._state = None
        self._superceded_by = None
        self._validator = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if example is not None:
            self.example = example
        if required is not None:
            self.required = required
        if state is not None:
            self.state = state
        if superceded_by is not None:
            self.superceded_by = superceded_by
        if validator is not None:
            self.validator = validator

    @property
    def name(self):
        """Gets the name of this TriggerParamSpec.  # noqa: E501

        Parameter name as it appears in policy document  # noqa: E501

        :return: The name of this TriggerParamSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TriggerParamSpec.

        Parameter name as it appears in policy document  # noqa: E501

        :param name: The name of this TriggerParamSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TriggerParamSpec.  # noqa: E501


        :return: The description of this TriggerParamSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TriggerParamSpec.


        :param description: The description of this TriggerParamSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def example(self):
        """Gets the example of this TriggerParamSpec.  # noqa: E501

        An example value for the parameter (encoded as a string if the parameter is an object or list type)  # noqa: E501

        :return: The example of this TriggerParamSpec.  # noqa: E501
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this TriggerParamSpec.

        An example value for the parameter (encoded as a string if the parameter is an object or list type)  # noqa: E501

        :param example: The example of this TriggerParamSpec.  # noqa: E501
        :type: str
        """

        self._example = example

    @property
    def required(self):
        """Gets the required of this TriggerParamSpec.  # noqa: E501

        Is this a required parameter or optional. If required it must be present in the json and validate based on the provided validator. If optional it can be present in json and null or omitted.  # noqa: E501

        :return: The required of this TriggerParamSpec.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TriggerParamSpec.

        Is this a required parameter or optional. If required it must be present in the json and validate based on the provided validator. If optional it can be present in json and null or omitted.  # noqa: E501

        :param required: The required of this TriggerParamSpec.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def state(self):
        """Gets the state of this TriggerParamSpec.  # noqa: E501

        State of the trigger parameter  # noqa: E501

        :return: The state of this TriggerParamSpec.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TriggerParamSpec.

        State of the trigger parameter  # noqa: E501

        :param state: The state of this TriggerParamSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "deprecated", "eol"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def superceded_by(self):
        """Gets the superceded_by of this TriggerParamSpec.  # noqa: E501

        The name of another gate that supercedes this on functionally if this is deprecated  # noqa: E501

        :return: The superceded_by of this TriggerParamSpec.  # noqa: E501
        :rtype: str
        """
        return self._superceded_by

    @superceded_by.setter
    def superceded_by(self, superceded_by):
        """Sets the superceded_by of this TriggerParamSpec.

        The name of another gate that supercedes this on functionally if this is deprecated  # noqa: E501

        :param superceded_by: The superceded_by of this TriggerParamSpec.  # noqa: E501
        :type: str
        """

        self._superceded_by = superceded_by

    @property
    def validator(self):
        """Gets the validator of this TriggerParamSpec.  # noqa: E501

        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.  # noqa: E501

        :return: The validator of this TriggerParamSpec.  # noqa: E501
        :rtype: object
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this TriggerParamSpec.

        If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.  # noqa: E501

        :param validator: The validator of this TriggerParamSpec.  # noqa: E501
        :type: object
        """

        self._validator = validator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerParamSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
